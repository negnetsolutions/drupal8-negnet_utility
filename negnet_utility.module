<?php

/**
 * @file
 * Negnet Utility Module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\negnet_utility\RestrictedAccess;
use Drupal\negnet_utility\NegCache;
use Drupal\negnet_utility\Popup;

/**
 * Implements hook_preprocess_field().
 */
function negnet_utility_preprocess_field(&$variables, $hook) {
  // Hide al labels.
  $variables['label_display'] = 'hidden';
  $variables['label_hidden'] = TRUE;
}

/**
 * Implements hook_preproces_image().
 */
function negnet_utility_preprocess_image(&$variables) {
  if (isset($variables['attributes']['srcset'])) {

    if (!isset($GLOBALS['rs_image_count'])) {
      $GLOBALS['rs_image_count'] = 0;
    }

    $variables['attributes']['class'][] = 'responsive-image';
    $variables['attributes']['class'][] = 'lazyload';

    // Put srcset into data attribute so lazyloader will defer loading.
    $variables['attributes']['data-srcset'] = $variables['attributes']['srcset'];

    // Unset the srcset attributes.
    unset($variables['attributes']['srcset']);

    // Since we are using lazyloaded images, set sizes to auto.
    if (!isset($variables['attributes']['sizes']) || $variables['attributes']['sizes'] == '100vw') {
      $variables['attributes']['sizes'] = 'auto';
    }

    // Require lazyload libraries.
    $variables['#attached']['library'][] = 'negnet_utility/negnet-responsive-images';

    // If this is the first image, allow it to load and show the low res version.
    if ($GLOBALS['rs_image_count'] < 1) {
      $variables['attributes']['class'][] = 'lazyloaded';
      $variables['attributes']['class'][] = 'fuzzy-lazy-load';
    }

    $GLOBALS['rs_image_count']++;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function negnet_utility_preprocess_node(&$variables) {
  if ($variables['node']->bundle() == 'popup') {
    $variables['attributes']['data-popup'] = $variables['node']->id();
    $variables['#attached']['library'][] = 'negnet_utility/popup';
  }
}

/**
 * Implements hook_preprocess_responsive_image().
 */
function negnet_utility_preprocess_responsive_image(&$variables) {
  // Add base height and width as data elements.
  if (isset($variables['height']) && isset($variables['width'])) {
    $variables['img_element']['#attributes']['data-width'] = $variables['width'];
    $variables['img_element']['#attributes']['data-height'] = $variables['height'];
  }
}

/**
 * Implements hook_preproces_html().
 */
function negnet_utility_preprocess_html(&$variables) {

  $node = \Drupal::request()->attributes->get('node');
  if ($node && is_object($node)) {

    // Check for popups.
    if ($node->hasField('field_popup') && !$node->get('field_popup')->isEmpty()) {
      Popup::render($node->get('field_popup')->entity, $variables);
    }

    // Check if node is restricted.
    if (RestrictedAccess::nodeIsRestricted($node)) {
      \Drupal::service('page_cache_kill_switch')->trigger();

      // Check Access.
      if (!RestrictedAccess::userHasAccessToNode($node)) {
        $response = new RedirectResponse(Url::fromRoute('negnet_utility.restricted', ['return' => '/node/' . $node->id()])->toString());
        $response->send();
        return;
      }

      // Set a status message for editors.
      if ($node->access('update')) {
        \Drupal::messenger()->addStatus('This page has password protection enabled.');
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function negnet_utility_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $node = $form_state->getFormObject()->getEntity();
  $config = \Drupal::config('negnet_utility.restricted_access');
  $types = $config->get('bundles_enabled');

  if (!is_array($types)) {
    $types = [];
  }

  // Check to see if we need to enable restriction options for node type.
  if (in_array($node->getType(), $types, TRUE) === TRUE) {
    $form['password_protection'] = [
      '#type' => 'details',
      '#title' => t('Password Protection'),
      '#group' => 'advanced',
      '#tree' => TRUE,
    ];

    $form['restricted_enabled'] = [
      '#type' => 'checkbox',
      '#title' => 'Enable Password Protection?',
      '#default_value' => ($config->get('access.' . $node->id()) !== NULL) ? $config->get('access.' . $node->id()) : FALSE,
      '#group' => 'password_protection',
      '#weight' => 0,
    ];

    $form['restricted_password'] = [
      '#type' => 'textfield',
      '#title' => 'Password',
      '#description' => 'Password for which to protect this page.',
      '#default_value' => ($config->get('password.' . $node->id()) !== NULL) ? $config->get('password.' . $node->id()) : FALSE,
      '#group' => 'password_protection',
      '#weight' => 1,
    ];

    $form['#validate'][] = 'Drupal\negnet_utility\RestrictedAccess::nodeFormValidate';
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function negnet_utility_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Alter login form and add own custom submit handler.
  $form['#submit'][] = '_negnet_utility_user_login_form_submit';
}

/**
 * Custom submit handler for login form.
 */
function _negnet_utility_user_login_form_submit($form, FormStateInterface $form_state) {
  // Set redirect to login form.
  $form_state->setRedirect('<front>');
}

/**
 * Alter the generated link data before the sitemap is saved.
 * This hook gets invoked for every sitemap chunk generated.
 *
 * @param array &$links
 *   Array containing multilingual links generated for each path to be indexed
 *
 * @param string|null $sitemap_variant
 */
function negnet_utility_simple_sitemap_links_alter(array &$links, $sitemap_variant) {
   foreach ($links as $key => $link) {
     if (isset($link['meta']['entity_info']) && $link['meta']['entity_info']['entity_type'] == 'node') {
      $node = Node::load($link['meta']['entity_info']['id']);
      if (RestrictedAccess::nodeIsRestricted($node)) {
        unset($links[$key]);
      }
     }
   }
}

/**
 * Implements hook_theme().
 */
function negnet_utility_theme($existing, $type, $theme, $path) {
  return [
    'node__popup' => [
      'template' => 'node--popup',
      'base hook' => 'node',
    ],
    'negnet_restricted_access' => [
      'template' => 'restricted-access' ,
      'variables' => [
        'webform' => null,
      ],
    ],

  ];
}

/**
 * Implements hook_node_presave().
 */
function negnet_utility_node_presave(Node $node) {
  NegCache::invalidateNode($node);
}

/**
 * Implements hook_node_presave().
 */
function negnet_utility_node_delete(Node $node) {
  NegCache::invalidateNode($node);
}

/**
 * Implements hook_node_presave().
 */
function negnet_utility_taxonomy_term_presave($term) {
  NegCache::invalidateTerm($term);
}

/**
 * Implements hook_node_presave().
 */
function negnet_utility_taxonomy_termnode_delete($term) {
  NegCache::invalidateTerm($term);
}
